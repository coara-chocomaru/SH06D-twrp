name: Recovery Build (Legacy) - ubuntu:14.04 docker (robust)

on:
  push:
    branches:
      - main

env:
  MANIFEST_URL: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni'
  MANIFEST_BRANCH: 'twrp-4.4-deprecated'
  DEVICE_TREE_URL: 'https://github.com/coara-chocomaru/SH06D-twrp'
  DEVICE_TREE_BRANCH: 'main'
  DEVICE_PATH: 'device/shrp/sh06d'
  DEVICE_NAME: 'sh06d'
  MAKEFILE_NAME: 'omni_sh06d'
  BUILD_TARGET: 'recovery'
  JAVA_VERSION: '7'
  TRUSTY_IMAGE: 'geerlingguy/docker-ubuntu1404-ansible:latest'

jobs:
  build-14-04:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository (host)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show parameters
        run: |
          echo "Manifest URL: ${{ env.MANIFEST_URL }}"
          echo "Device Tree URL: ${{ env.DEVICE_TREE_URL }}"
          echo "Device Path: ${{ env.DEVICE_PATH }}"
          echo "Device Name: ${{ env.DEVICE_NAME }}"
          echo "Using TRUSTY_IMAGE=${{ env.TRUSTY_IMAGE }}"

      - name: Pull trusted Trusty image
        run: |
          docker pull "${{ env.TRUSTY_IMAGE }}" || true

      - name: Create containerized build script (host)
        run: |
          cat > "${{ github.workspace }}/build.sh" <<'EOF'
          #!/bin/bash
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive

          if [ -f /etc/apt/sources.list ]; then
            sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak || true
            sudo bash -c 'cat > /etc/apt/sources.list <<EOL
deb http://old-releases.ubuntu.com/ubuntu/ trusty main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ trusty-security main restricted universe multiverse
EOL' || true
          fi

          sudo apt-get update || true
          NEED_PKGS=""
          for pkg in curl git wget ca-certificates python2.7 python-is-python2 openjdk-7-jdk unzip bzip2 lzop fallocate util-linux; do
            if ! command -v "$pkg" >/dev/null 2>&1 && ! dpkg -s "$pkg" >/dev/null 2>&1; then
              NEED_PKGS="$NEED_PKGS $pkg"
            fi
          done
          if [ -n "$NEED_PKGS" ]; then
            sudo apt-get install -y --no-install-recommends $NEED_PKGS || true
          fi

          mkdir -p /root/bin
          if [ ! -x /root/bin/repo ]; then
            if command -v curl >/dev/null 2>&1; then
              curl -sSfL https://storage.googleapis.com/git-repo-downloads/repo -o /root/bin/repo || true
            elif command -v wget >/dev/null 2>&1; then
              wget -qO /root/bin/repo https://storage.googleapis.com/git-repo-downloads/repo || true
            fi
            chmod a+x /root/bin/repo || true
          fi
          export PATH=/root/bin:$PATH

          mkdir -p /workspace
          cd /workspace

          MANIFEST_URL="${MANIFEST_URL}"
          MANIFEST_BRANCH="${MANIFEST_BRANCH}"
          DEVICE_TREE_URL="${DEVICE_TREE_URL}"
          DEVICE_TREE_BRANCH="${DEVICE_TREE_BRANCH}"
          DEVICE_PATH="${DEVICE_PATH}"
          DEVICE_NAME="${DEVICE_NAME}"
          MAKEFILE_NAME="${MAKEFILE_NAME}"
          BUILD_TARGET="${BUILD_TARGET}"
          JAVA_VERSION="${JAVA_VERSION}"

          if [ -x /usr/bin/python2 ]; then
            ln -sf /usr/bin/python2 /usr/bin/python || true
          fi

          export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 || true
          export PATH="$JAVA_HOME/bin:$PATH"

          python /root/bin/repo init --depth=1 -u "${MANIFEST_URL}" -b "${MANIFEST_BRANCH}" || true
          python /root/bin/repo sync -j$(nproc --all) --force-sync --no-clone-bundle --no-tags || true

          TARGET_DIR="/workspace/${DEVICE_PATH}"
          mkdir -p "$(dirname "$TARGET_DIR")"
          if [ -d "$TARGET_DIR" ] && [ -n "$(ls -A $TARGET_DIR 2>/dev/null)" ]; then
            mv "$TARGET_DIR" "${TARGET_DIR}.bak.$(date +%s)" || true
          fi
          git clone --depth=1 -b "${DEVICE_TREE_BRANCH}" "${DEVICE_TREE_URL}" "$TARGET_DIR" || true

          if [ ! -f /swapfile ]; then
            set +e
            if command -v fallocate >/dev/null 2>&1; then
              fallocate -l 12G /swapfile || true
            fi
            if [ ! -s /swapfile ]; then
              dd if=/dev/zero of=/swapfile bs=1M count=12288 status=none || true
            fi
            chmod 600 /swapfile || true
            SWAP_OK=0
            if mkswap /swapfile >/dev/null 2>&1; then
              if swapon /swapfile >/dev/null 2>&1; then
                SWAP_OK=1
              fi
            fi
            if [ "$SWAP_OK" -ne 1 ]; then
              if command -v losetup >/dev/null 2>&1; then
                LOOPDEV=$(losetup --find --show /swapfile 2>/dev/null || true)
                if [ -n "$LOOPDEV" ]; then
                  if mkswap "$LOOPDEV" >/dev/null 2>&1 && swapon "$LOOPDEV" >/dev/null 2>&1; then
                    SWAP_OK=1
                  fi
                fi
              fi
            fi
            if [ "$SWAP_OK" -eq 1 ]; then
              echo '/swapfile none swap sw 0 0' >> /etc/fstab || true
            fi
            set -e
          fi

          export ALLOW_MISSING_DEPENDENCIES=true
          export LC_ALL=C

          if [ -f build/envsetup.sh ]; then
            cd /workspace || true
            set +u
            source build/envsetup.sh || true
            set -u
            LUNCH_OK=0
            for combo in "${MAKEFILE_NAME}-eng" "${MAKEFILE_NAME}-userdebug" "${DEVICE_NAME}-eng" "omni_${DEVICE_NAME}-eng" "omni_${DEVICE_NAME}-userdebug" "aosp_${DEVICE_NAME}-userdebug"; do
              lunch "$combo" >/workspace/lunch.log 2>&1 || true
              if [ -n "${TOP:-}" ]; then
                LUNCH_OK=1
                break
              fi
            done
            if [ "$LUNCH_OK" -ne 1 ]; then
              echo "Warning: lunch combo not found. Continuing."
            fi
            make clean || true
            make -j$(nproc --all) "${BUILD_TARGET}" || true
          else
            echo "ERROR: build/envsetup.sh not found. repo init/sync may have failed."
            exit 1
          fi

          echo "Build finished inside container. Artifacts should be in /workspace/out/target/product/${DEVICE_NAME}"
          ls -la /workspace/out/target/product/${DEVICE_NAME} || true
          EOF
          chmod +x "${{ github.workspace }}/build.sh"

      - name: Run build inside trusted ubuntu:14.04 container
        run: |
          docker run --rm --privileged \
            -v "${{ github.workspace }}":/workspace \
            -w /workspace \
            -e MANIFEST_URL="${{ env.MANIFEST_URL }}" \
            -e MANIFEST_BRANCH="${{ env.MANIFEST_BRANCH }}" \
            -e DEVICE_TREE_URL="${{ env.DEVICE_TREE_URL }}" \
            -e DEVICE_TREE_BRANCH="${{ env.DEVICE_TREE_BRANCH }}" \
            -e DEVICE_PATH="${{ env.DEVICE_PATH }}" \
            -e DEVICE_NAME="${{ env.DEVICE_NAME }}" \
            -e MAKEFILE_NAME="${{ env.MAKEFILE_NAME }}" \
            -e BUILD_TARGET="${{ env.BUILD_TARGET }}" \
            -e JAVA_VERSION="${{ env.JAVA_VERSION }}" \
            "${{ env.TRUSTY_IMAGE }}" /bin/bash -c "/workspace/build.sh"

      - name: List artifacts on host
        run: |
          ls -la "${{ github.workspace }}/out/target/product/${{ env.DEVICE_NAME }}" || true

      - name: Create GitHub Release and upload artifacts (host)
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            out/target/product/${{ env.DEVICE_NAME }}/*.zip
            out/target/product/${{ env.DEVICE_NAME }}/*.img
            out/target/product/${{ env.DEVICE_NAME }}/*vendor*.img
          name: ${{ env.DEVICE_NAME }}-android5-${{ github.run_id }}
          tag_name: ${{ github.run_id }}
          body: |
            Manifest: ${{ env.MANIFEST_BRANCH }}
            Device: ${{ env.DEVICE_NAME }}
            Target: ${{ env.BUILD_TARGET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

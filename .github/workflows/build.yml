name: Recovery Build (Legacy)

on:
  push:
    branches:
      - main

env:
  MANIFEST_URL: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni'
  MANIFEST_BRANCH: 'twrp-5.1'
  DEVICE_TREE_URL: 'https://github.com/coara-chocomaru/SH06D-twrp'
  DEVICE_TREE_BRANCH: 'main'
  DEVICE_PATH: 'device/sharp/sh06d'
  DEVICE_NAME: 'sh06d'
  MAKEFILE_NAME: 'omni_sh06d'
  BUILD_TARGET: 'recovery'

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    - name: Display Run Parameters
      run: |
        echo "::group::User Environment Variables"
        echo "Manifest URL: ${{ env.MANIFEST_URL }}"
        echo "Manifest Branch: ${{ env.MANIFEST_BRANCH }}"
        echo "Device Tree URL: ${{ env.DEVICE_TREE_URL }}"
        echo "Device Tree Branch: ${{ env.DEVICE_TREE_BRANCH }}"
        echo "Device Path: ${{ env.DEVICE_PATH }}"
        echo "Device Name: ${{ env.DEVICE_NAME }}"
        echo "Makefile Name: ${{ env.MAKEFILE_NAME }}"
        echo "Build Target: ${{ env.BUILD_TARGET }}.img"
        echo "::endgroup::"

    - name: Check Out
      uses: actions/checkout@v3

    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main

    - name: Prepare the environment (install packages, ensure python -> python2)
      run: |
        sudo apt update
        sudo apt -y upgrade

        # Essential build packages (kept your original list, added rsync/curl and python2 tools)
        sudo apt -y install \
          gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib libc6-dev \
          lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils \
          xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev \
          libwxgtk3.0-gtk3-dev libxml2 lzop pngcrush schedtool squashfs-tools imagemagick \
          libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libncurses5 rsync curl unzip \
          python2.7

        # Ensure `python` points to python2 (so repo and old scripts run)
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1 || true
        python --version

        # Ensure ~/bin exists for repo binary
        mkdir -p ~/bin
        echo "Prepared environment"

    - name: Install OpenJDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'

    - name: Setup SSH Keys
      if: ${{ startsWith(env.MANIFEST_URL, 'git@github.com') }}
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Install repo
      run: |
        mkdir -p ~/bin
        curl -sS https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo
        echo "repo installed to ~/bin/repo and /usr/bin/repo"
      
    - name: Initialize repo
      env:
        REPO_PYTHON: /usr/bin/python
      run: |
        mkdir workspace
        cd workspace
        # export workspace folder to outputs for later steps
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        git config --global user.name "azwhikaru"
        git config --global user.email "azwhikaru+37921907@github.com"
        # ensure repo uses python2 interpreter
        export REPO_PYTHON=/usr/bin/python
        repo init --depth=1 -u ${{ env.MANIFEST_URL }} -b ${{ env.MANIFEST_BRANCH }}
      id: pwd

    - name: Repo Sync
      env:
        REPO_PYTHON: /usr/bin/python
      run: |
        export REPO_PYTHON=/usr/bin/python
        cd workspace
        repo sync -j$(nproc --all) --force-sync
      working-directory: workspace

    - name: Checkout Device Tree (clone the device tree repo separately)
      run: |
        # Clone device tree to a predictable location in the runner workspace
        rm -rf $GITHUB_WORKSPACE/device-tree || true
        git clone --depth=1 -b ${{ env.DEVICE_TREE_BRANCH }} ${{ env.DEVICE_TREE_URL }} $GITHUB_WORKSPACE/device-tree
        ls -la $GITHUB_WORKSPACE/device-tree

    - name: Copy device-tree into AOSP workspace device path (do NOT mv whole workspace)
      run: |
        WORKSPACE_DIR="${{ steps.pwd.outputs.workspace-folder }}"
        TARGET_DIR="$WORKSPACE_DIR/${{ env.DEVICE_PATH }}"
        echo "Workspace: $WORKSPACE_DIR"
        echo "Target device path: $TARGET_DIR"
        mkdir -p "$TARGET_DIR"
        # use rsync to copy only the device tree contents into workspace/device/<...>
        rsync -a --delete $GITHUB_WORKSPACE/device-tree/ "$TARGET_DIR/"
        echo "Device tree copied to workspace device path"
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
        
    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12
        
    - name: Configure CCACHE
      run: |
        export USE_CCACHE=1
        export CCACHE_DIR=${{ github.workspace }}/.ccache
        mkdir -p $CCACHE_DIR
        ccache -M 50G || true

    - name: Building recovery
      run: |
        set -eux
        cd "${{ steps.pwd.outputs.workspace-folder }}"
        # ensure python used is python2 for old scripts invoked by build system
        export REPO_PYTHON=/usr/bin/python
        export PATH="$HOME/bin:$PATH"
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch ${{ env.MAKEFILE_NAME }}-eng
        make clean
        make ${{ env.BUILD_TARGET }}image -j$(nproc --all)
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          workspace/out/target/product/${{ env.DEVICE_NAME }}/${{ env.BUILD_TARGET }}.img
          workspace/out/target/product/${{ env.DEVICE_NAME }}/*.zip
          workspace/out/target/product/${{ env.DEVICE_NAME }}/*vendor*.img
        name: ${{ env.DEVICE_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: |
          Manifest: ${{ env.MANIFEST_BRANCH }}
          Device: ${{ env.DEVICE_NAME }}
          Target: ${{ env.BUILD_TARGET }}.img
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
